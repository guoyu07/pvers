#! /usr/bin/env bash

function main {
    # Check options
    case "$1" in
        "-h" | "--help" )
            help; exit 0
        ;;
        "-v" | "--version" )
            version; exit 0
        ;;
        "-l" | "--list" )
            current=`ls -l /usr/share/pvers | awk '{if ($9=="current") {print $11}}' | awk -F/ '{print $5}'`
            ls -l /usr/share/pvers | awk -v cr=$current '{if (NR>1 && $9!="current" && $9!=cr) {print $9} else if ($9==cr) {print $9" [*]"}}'
            exit 0
        ;;
        "-d" | "--delete" )
            is_root
            if [ ! $2 ];  then
                echo "You must specify a PHP version you want to delete."
            elif [ ! -d "/usr/share/pvers/"$2 ] ; then
                echo "PHP version "$2" is not installed on your system."
            else
                while true; do
                    read -p "Do you really want to delete php-"$2" from your computer? [Y/n] " yn
                    case $yn in
                        [Yy]* ) rm -rf "/usr/share/pvers/"$2; exit 0;;
                        [Nn]* ) exit 0;;
                        *) echo "Your answer should be directly Y or n!" ;;
                    esac
                done
            fi
            exit 0 
        ;;
        * ) # Installation
            is_root

            # Check version
            if [[ ! $1 =~ ^5\.[0-9]{1}\.{0,1}[0-9]{0,2}$ ]]; then
                printf "You should provide a correct PHP version (5.0 and above).\n"\
                "Use '-h' or '--help' flag to get help.\n"
                exit 1
            else
                version=$1
            fi

            # Check if another PHP version exists in a system
            if [[ ! -z `php -v 2>/dev/null` ]] && [[ ! -d /usr/share/pvers ]]; then
                echo "Another PHP interpreter is already installed in your system!"
                exit 1
            fi

            # Init pathes
            basedir="/usr/share/pvers/"$version
            archive=$(echo "php-"$version".tar.bz2")
            srcdir=$(echo $basedir"/src")
            builddir=$(echo $basedir"/build")
            currdir="/usr/share/pvers/current"

            # Download && Compile
            if [ ! -d $basedir ]; then
                echo "Downloading..."
                mkdir -p `echo $basedir`
                cd $basedir;

                if [[ ! -d $basedir ]] || [[ $basedir != $(pwd) ]]; then
                    echo "Can not create directory! Try running as su."
                    exit 1
                fi

                # if [[ ! -z `git --version 2>/dev/null` ]] ; then
                    # echo "Can not run without `git`. Try to install it!"
                    # exit 1
                # fi

                echo "http://ru2.php.net/get/"$archive"/from/this/mirror"
                wget -q $(echo "http://ru2.php.net/get/"$archive"/from/this/mirror")

                echo "Extracting..."

                mv mirror $(echo $archive)
                tar xjf $(echo $archive)
                mv $(echo "php-"$version) src
                rm $(echo $archive)
                cd "src"

                # Get from github
                # git clone https://github.com/php/php-src.git
                # cd php-src
                # git checkout "PHP-"$version

                echo "Configuring..."
                # compile_options=("--with-openssl" "--enable-bcmath" "--enable-fpm" "--with-openssl" "--with-curl" "--enable-mbstring" "--with-mysqli" "--with-pdo-mysql" "--with-libedit" "--enable-soap" "--enable-sockets");
                
                compile_options=("--prefix="$builddir"\
                    --with-config-file-path=/etc/php/php.ini\
                    --with-openssl\
                    --enable-bcmath\
                    --enable-fpm\
                    --with-openssl\
                    --with-curl\
                    --enable-mbstring\
                    --with-mysqli\
                    --with-pdo-mysql\
                    --with-libedit\
                    --enable-soap\
                    --enable-sockets")
                ./configure $compile_options
                
                echo "Compiling..."
                make clean && make && make install

                # Applying php.ini
                if [[ ! -f /etc/php/php.ini && -f $(echo $srcdir"/php.ini-production") ]]; then
                    mkdir -p /etc/php/
                    cp -f $(echo $srcdir"/php.ini-production") /etc/php/php.ini
                fi

                echo "Successfully installed!"
            fi

            # Linking
            echo "Linking..."
            cd $basedir

            ln -sfT $builddir $currdir
            ls -l $(echo $currdir"/bin") | awk -v bp=$currdir '{if (NR!=1) {print "ln -sf "bp"/bin/"$9" /usr/bin/"$9}}' | bash
            ls -l $(echo $currdir"/sbin") | awk -v bp=$currdir '{if (NR!=1) {print "ln -sf "bp"/sbin/"$9" /usr/sbin/"$9}}' | bash

            echo "Current PHP version is "$version
            exit 0

            help; exit 0
        ;;
    esac
}

# Print help info
function help {
    printf "Usage: %s\n"\
    "pvers [ options ... ] [php-version]"
    printf "Where options are:\n"
    printf "    %s\n"\
    "-h or --help        Print this message."\
    "-v or --version     Print pvers version."\
    "-l or --list        List locally installed PHP versions."\
    "-d or --delete      Remove locally installed PHP version (as root only)."
    # --force
    # --global
    # --recompile all
    printf "To install or select (if already installed) PHP of version 5.6.6 type:\n\n%s\n\n"\
    "$ pvers 5.6.6"
}

# Version
function version {
    printf "pvers (PHP version manager) v0.5\n"
}

# Check if user is root
function is_root {
    if [ $(id -u) != "0" ]; then
        printf "Run this script as root to use this option!\nUse '-h' or '--help' flag to get help.\n"
        exit 1
    fi
}

# @todo Check if php version exists (locally or remote)
function exists {
    echo $1
}

# @todo Select a mirror
function mirror {
    echo 123;
}

# @todo Get currently used php version
function current {
    echo $1
}

# @todo Save dir (base dir with php sources) hash after successfull install
function save_hash {
    echo $1
}

main $@