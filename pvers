#! /usr/bin/env bash
#
# pvers v0.6
# PHP Version Manager
#  
# Ivan Zinovyev <vanyazin@gmail.com>
#

function main {
    verbose=false

    # Check options
    case "$1" in
        "-h" | "--help" )
            c_help; exit 0
        ;;
        "-v" | "--version" )
            c_version; exit 0
        ;;
        "-l" | "--list" )
            c_list; exit 0
        ;;
        "-d" | "--delete" )
            is_root; c_delete; exit 0
        ;;
        * ) # Installation
            is_root
            version=$(correct_php_version $1)

            # Init pathes
            basedir="/usr/share/pvers/"$version
            archive=$(echo "php-"$version".tar.bz2")
            srcdir=$(echo $basedir"/src")
            builddir=$(echo $basedir"/build")
            currdir="/usr/share/pvers/current"
            confpath="/etc/php"

            # Install given version
            c_install $version

            # Select given version
            c_select $version

            exit 0
        ;;
    esac
}

# Command: print current version
function c_version {
    version="0.6"
    printf "pvers (PHP version manager) v"$version"\n"
}

# Print help info
function c_help {
    printf "\nUsage: %s\n"\
    "pvers [ options ... ] [php-version]"
    printf "Where options are:\n"
    printf "    %s\n"\
    "-h or --help        Print this message."\
    "-v or --version     Print pvers version."\
    "-l or --list        List locally installed PHP versions."\
    "-d or --delete      Remove locally installed PHP version (as root only)."\
    "-vv or --verbose    Verbose output (show all warnings and errors)."
    # -f or --force
    # -g or --global
    # -r or --recompile all    
    printf "To install or select (if already installed) PHP of version 5.6.6 type:\n\n%s\n\n"\
    "$ pvers 5.6.6"
}

# Command: list installed versions
function c_list {
    current=`ls -l /usr/share/pvers | awk '{if ($9=="current") {print $11}}' | awk -F/ '{print $5}'`
    ls -l /usr/share/pvers | awk -v cr=$current '{if (NR>1 && $9!="current" && $9!=cr) {print $9} else if ($9==cr) {print $9" [*]"}}'
}

# Command: build new PHP version
function c_install {
    version=$1

    # Check if another PHP version exists in a system
    if [[ ! -z `php -v 2>/dev/null` ]] && [[ ! -d /usr/share/pvers ]]; then
        echo "Another PHP interpreter is already installed in your system!"
        exit 1
    fi

    # Check if a wanted version is marked as an old release or not
    oldest_version="3" # For PHP-5.3
    wanted_version=$(echo $version | sed 's/5\.\([0-9]\{1,2\}\)\.[0-9]\{1,2\}/\1/')
    if [[ $wanted_version -le $oldest_version ]]; then

        while true; do
            read -p "You have selected an old version of PHP. It support is highly experimental. Really want to continue? [Y/n] " yn
            case $yn in
                [Yy]* ) break;;
                [Nn]* ) exit 0;;
                *) echo "Your answer should be directly Y or n!" ;;
            esac
        done

        url="http://museum.php.net/php5/"$archive
    else
        url="http://ru2.php.net/get/"$archive"/from/this/mirror"
    fi

    # Download && Compile
    if [ ! -d $basedir ]; then
        echo "Downloading..."
        mkdir -p `echo $basedir`
        cd $basedir;

        if [[ ! -d $basedir ]] || [[ $basedir != $(pwd) ]]; then
            echo "Can not create directory! Try running as su."
            exit 1
        fi

        wget -q $url

        echo "Extracting..."

        if [ -f mirror ]; then
            mv mirror $(echo $archive)
        elif [ ! -f $archive ]; then
            rm -rf $basedir
            echo "Failed to download! Try another version."; exit 1
        fi

        tar xjf $(echo $archive)
        mv $(echo "php-"$version) src
        rm $(echo $archive)                

        echo "Configure..."
        cd src
        compile_options=("-q\
            --prefix="$builddir"\
            --with-config-file-path="$confpath"\
            --with-openssl\
            --enable-bcmath\
            --enable-fpm\
            --with-openssl\
            --with-curl\
            --enable-mbstring\
            --with-mysqli\
            --with-pdo-mysql\
            --with-libedit\
            --enable-soap\
            --enable-sockets")
        ./configure $compile_options
        
        echo "Compile..."
        if [[ `uname` == "Linux" ]]; then
            # Try using as much cores as possible
            make -s -i -k clean 1>/dev/null 2>&1 ; make -s -i -k -j $(grep -c ^processor /proc/cpuinfo) && make -s -i -k install
        else
            make -s -i -k clean 1>/dev/null 2>&1 ; make -s -i -k -j && make -s -i -k install
        fi

        # Applying php.ini
        echo "Check php.ini..."
        if [[ ! -f /etc/php/php.ini && -f $(echo $srcdir"/php.ini-production") ]]; then
            mkdir -p /etc/php/
            cp -f $(echo $srcdir"/php.ini-production") /etc/php/php.ini
        fi

        echo "Successfully installed!"
    fi
}

# Command: select existing PHP version
function c_select {
    # Linking
    echo "Linking..."
    cd $basedir

    ln -sfT $builddir $currdir
    ls -l $(echo $currdir"/bin") | awk -v bp=$currdir '{if (NR!=1) {print "ln -sf "bp"/bin/"$9" /usr/bin/"$9}}' | bash
    ls -l $(echo $currdir"/sbin") | awk -v bp=$currdir '{if (NR!=1) {print "ln -sf "bp"/sbin/"$9" /usr/sbin/"$9}}' | bash

    echo "Current PHP version is "$version
}

# Command: delete existing PHP version
function c_delete {
    if [ ! $1 ];  then
        echo "You must specify a PHP version you want to delete."
    elif [ ! -d "/usr/share/pvers/"$1 ] ; then
        echo "PHP version "$1" is not installed on your system."
    else
        while true; do
            read -p "Do you really want to delete php-"$1" from your computer? [Y/n] " yn
            case $yn in
                [Yy]* ) rm -rf "/usr/share/pvers/"$1; exit 0;;
                [Nn]* ) exit 0;;
                *) echo "Your answer should be directly Y or n!" ;;
            esac
        done
    fi
}

# Check if user is root
function is_root {
    if [ $(id -u) != "0" ]; then
        printf "Run this script as root to use this option!\nUse '-h' or '--help' flag to get help.\n"
        exit 1
    fi
}

# @todo Check and fix php version
function correct_php_version {
    if [[ ! $1 =~ ^5\.[0-9]{1}\.{0,1}[0-9]{0,2}$ ]]; then
        printf "You should provide a correct PHP version (5.0 and above).\n"\
        "Use '-h' or '--help' flag to get help.\n"
        exit 1
    else
        # Check and fix version number
        major=$(echo $1 | awk -F. '{print $2}')
        minor=$(echo $1 | awk -F. '{print $3}')

        # Fix minor version
        if [[ -z $minor ]]; then
            case $major in
                "0" ) minor=5;;
                "1" ) minor=6;;
                "2" ) minor=17;;
                "3" ) minor=29;;
                "4" ) minor=38;;
                "5" ) minor=22;;
                "6" ) minor=6;;
                "*" ) "Wrong major version (should be 0-6)!"; exit 1 ;;
            esac
            version="5."$major"."$minor
        else
            version=$1
        fi

        echo $version
    fi
}

# @todo Check if php version exists (locally or remote)
function check_version_installed {
    echo 'todo'
}

# @todo Select a mirror
function get_mirrors {
    echo 'todo'
}

main $@